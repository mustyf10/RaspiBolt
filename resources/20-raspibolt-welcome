#!/bin/sh
# RaspiBolt LND Mainnet: systemd unit for getpublicip.sh script
# /etc/systemd/system/20-bitnode-welcome.sh
# Edited by mustyf10 for personal use and to show on Pi-LCD whilst running
# Run using 'Bitcoin' profile and loads as soon as user logs in, CTRL-C to exit
#
# set colors
color_red='\033[0;31m'
color_green='\033[0;32m'
color_yellow='\033[0;33m'
color_gray='\033[0;37m'
color_blue='\033[0;35m'

# set datadir
bitcoin_dir="/home/bitcoin/bitcoinData"

#Set to mount point of blockchain volume. This is used to calculate USB HDD usage %
ext_hdd="192.168.1.4:/export/bitcoin"

#Set to network device name (usually eth0 for ethernet or wlan0 for wireless on raspberry pi unless you have 'Predictable Network Names' turned on in raspi-config. To get network device name run ifconfig.)
network_name="eth0"

clear

while :
do
# get current time
now=$(date +"%d %b %-I:%M%p")

# get btc/gbp price
price=$(/usr/bin/python /home/bitcoin/getPrice)

# get uptime & load
load=$(cat /proc/loadavg | awk '{print $1,$2,$3}')
upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
mins=$((${upSeconds}/60%60))
hours=$((${upSeconds}/3600%24))
days=$((${upSeconds}/86400))
uptime=`printf "%d days %02d hrs %02d mins" "$days" "$hours" "$mins"`

# get CPU temp
cpu=$(cat /sys/class/thermal/thermal_zone0/temp)
temp=$((cpu/1000))
if [ ${temp} -lt 75 ]; then
  color_cpu="${color_green}"
else
  colour_cpu=${color_red}
fi

# get memory
ram_avail=$(free -m | grep Mem | awk '{ print $7 }')
ram=$(printf "%sM / %sM" "${ram_avail}" "$(free -m | grep Mem | awk '{ print $2 }')")

if [ ${ram_avail} -lt 100 ]; then
  color_ram="${color_red}\e[7m"
else
  color_ram=${color_green}
fi

# get storage
sd_free_ratio=$(printf "%d" "$(df | grep "/$" | awk '{ print $4/$2*100 }')") 2>/dev/null
sd=$(printf "%s (%s%%)" "$(df -h | grep '/$' | awk '{ print $4 }')" "${sd_free_ratio}")
if [ ${sd_free_ratio} -lt 10 ]; then
  color_sd="${color_red}"
else
  color_sd=${color_green}
fi

hdd_free_ratio=$(printf "%d" "$(df  | grep ${ext_hdd} | awk '{ print $4/$2*100 }')") 2>/dev/null
hdd=$(printf "%s (%s%%)" "$(df -h | grep ${ext_hdd} | awk '{ print $4 }')" "${hdd_free_ratio}")

if [ ${hdd_free_ratio} -lt 10 ]; then
  color_hdd="${color_red}\e[7m"
else
  color_hdd=${color_green}
fi

# get network traffic
network_rx=$(ifconfig ${network_name} | grep 'RX packets' | awk '{ print $6$7 }' | sed 's/[()]//g')
network_tx=$(ifconfig ${network_name} | grep 'TX packets' | awk '{ print $6$7 }' | sed 's/[()]//g')

# Bitcoin blockchain
btc_path=$(command -v bitcoin-cli)
if [ -n ${btc_path} ]; then
  btc_title="Bitcoin"
  chain="$(bitcoin-cli getblockchaininfo | jq -r '.chain')"
  if [ -n $chain ]; then
    btc_title="${btc_title} (${chain}net)"

    # get sync status
    block_chain="$(bitcoin-cli getblockchaininfo | jq -r '.headers')"
    block_verified="$(bitcoin-cli getblockchaininfo | jq -r '.blocks')"
    block_diff=$(expr ${block_chain} - ${block_verified})

    progress="$(bitcoin-cli getblockchaininfo | jq -r '.verificationprogress')"
    sync_percentage=$(printf "%.2f%%" "$(echo $progress | awk '{print 100 * $1}')")

    if [ ${block_diff} -eq 0 ]; then    # fully synced
      sync="OK"
      sync_color="${color_green}"
      sync_behind=" "
    elif [ ${block_diff} -eq 1 ]; then          # fully synced
      sync="OK"
      sync_color="${color_green}"
      sync_behind="-1 block"
    elif [ ${block_diff} -le 10 ]; then    # <= 2 blocks behind
      sync="Catching up"
      sync_color="${color_red}"
      sync_behind="-${block_diff} blocks"
    else
      sync="In progress"
      sync_color="${color_red}"
      sync_behind="${sync_percentage}"
    fi

    # get last known block
    last_block="$(bitcoin-cli getblockcount)"
    if [ ! -z "${last_block}" ]; then
      btc_line2="${btc_line2} ${color_gray}(block ${last_block})"
    fi

    # get mem pool transactions
    mempool="$(bitcoin-cli getmempoolinfo | jq -r '.size')"

    # get connection info
    connections="$(bitcoin-cli getnetworkinfo | jq .connections)"
    inbound="$(bitcoin-cli getpeerinfo | jq '.[] | select(.inbound == true)' | jq -s 'length')"
    outbound="$(bitcoin-cli getpeerinfo | jq '.[] | select(.inbound == false)' | jq -s 'length')"

  else
    btc_line2="${color_red}NOT RUNNING\t\t"
  fi
fi

# get public IP address & port
#public_ip=$(curl -s https://api.ipify.org)
onion_add="$(bitcoin-cli getnetworkinfo | jq -r '.localaddresses [0] .address')"
public_port=$(cat ${bitcoin_dir}/bitcoin.conf 2>/dev/null | grep ^port= | awk -F"=" '{print $2}')
if [ "${public_port}" = "" ]; then
  if [ $chain  = "test" ]; then
    public_port=18333
  else
    public_port=8333
  fi
fi

#Choose the top two lines if you experience 'not reachable' while blockchain syncs. Could be due to nat-loopback being not available. 
#public_check=$(curl -s https://bitnodes.io/api/v1/nodes/me-${public_port}/ | jq .success)
#if [ $public_check = "true" ]; then
public_check=$(timeout 2s nc -z 127.0.0.1 ${public_port}; echo $?)
if [ $public_check = "0" ]; then
  public="Yes"
  public_color="${color_green}"
else
  public="Not reachable"
  public_color="${color_red}"
fi
public_addr="${onion_add}:${public_port}"

#create variable btcversion
btcpi=$(bitcoin-cli -version |sed -n 's/^.*version //p')
#btcgit=$(curl -s https://api.github.com/repos/bitcoin/bitcoin/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
btcgit=$(curl -s --url https://api.github.com/repos/bitcoin/bitcoin/releases/latest --header "Authorization: token ###########################" | grep -oP '"tag_name": "\K(.*)(?=")')

if [ "$btcpi" = "$btcgit" ]; then
btcversion="$btcpi"
btcversion_color="${color_green}"
else
btcversion="$btcpi"" Update!"
btcversion_color="${color_red}"
fi

printf "
echo "$(tput home)"
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      ${color_yellow}%s: ${color_gray}Bitcoin Core           ${color_red}%s $(tput el)
${color_gray}                      ${color_yellow}%s $(tput el)
${color_gray}                      ${color_gray}Uptime       ${color_green}%s $(tput el)
${color_green}     .~~.   .~~.      ${color_gray}CPU Temp     ${color_cpu}%sÂ°C $(tput el)
${color_green}    '. \ ' ' / .'     ${color_gray}Load Average ${color_green}%s $(tput el)
${color_red}     .~ .~~~..~.      $(tput el)
${color_red}    : .~.'~'.~. :     ${color_yellow}%-24s %-24s $(tput el)
${color_red}   ~ (   ) (   ) ~    ${color_gray}Memory   ${color_ram}%-16s${btcversion_color}%-24s $(tput el)
${color_red}  ( : '~'.~.'~' : )   ${color_gray}SD       ${color_sd}%-16s${color_gray}Sync    ${sync_color}%-14s $(tput el)
${color_red}   ~ .~ (   ) ~. ~    ${color_gray}HDD      ${color_hdd}%-16s${color_gray}        %-14s $(tput el)
${color_red}    (  : '~' :  )     ${color_gray}Traffic  ${color_red}â–² %-12s  ${color_gray}Public  ${public_color}%-14s $(tput el)
${color_red}     '~ .~~~. ~'      ${color_gray}         ${color_green}â–¼ %-12s  %-20s $(tput el)
${color_red}         '~'           $(tput el)
${color_gray}                      ${color_blue}Connections ${color_gray}%-12s ${color_blue}Block Height ${color_gray}%-12s $(tput el)
${color_gray}                      ${color_blue}In/Out      ${color_gray}%-12s ${color_blue}Mempool      ${color_gray}%-12s $(tput el)
${color_gray}                      $(tput el)
${color_gray}                      ${color_yellow}BTC/GBP     %s$(tput ed)
${color_red}                      ${color_yellow}%s
%s %s
" \
"Mustafa's Node" "${now}" \
"-----------------------------------------------------" \
"${uptime}" \
"${temp}" \
"${load}" \
"Resources (% free)" "${btc_title}" \
"${ram}" "$btcversion" \
"${sd}" "${sync}" \
"${hdd}" "${sync_behind}" \
"${network_tx}" "${public}" \
"${network_rx}" "${public_addr}" \
"${connections}" "${last_block}" \
"${inbound}/${outbound}" "${mempool} tx" \
"${price}" \
""
echo "$(tput -T xterm sgr0)"
echo "$(tput civis)"

sleep 10
done
